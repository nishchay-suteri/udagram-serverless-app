service:
    name: serverless-udagram-app

plugins:
    - serverless-webpack
    - serverless-reqvalidator-plugin
    - serverless-aws-documentation

provider:
    name: aws
    runtime: nodejs12.x
    apiGateway:
        minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'us-east-1'}

    environment: # global environment variables - accessible to all lambda functions
        GROUPS_TABLE: Groups-${self:provider.stage}
        IMAGES_TABLE: Images-${self:provider.stage}
        CONNECTIONS_TABLE: Connections-${self:provider.stage}
        IMAGE_ID_INDEX: ImageIdIndex
        IMAGES_S3_BUCKET: serverless-udagram-suteri-images-${self:provider.stage}
        SIGNED_URL_EXPIRATION: 300
        THUMBNAILS_S3_BUCKET: serverless-udagram-suteri-thumbnail-${self:provider.stage}

    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Scan
              - dynamodb:PutItem
              - dynamodb:GetItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
        - Effect: Allow
          Action:
              - dynamodb:Query
              - dynamodb:PutItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}
        - Effect: Allow
          Action:
              - s3:PutObject
              - s3:GetObject
          Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        - Effect: Allow
          Action:
              - s3:PutObject
          Resource: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*
        - Effect: Allow
          Action:
              - dynamodb:Scan
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
custom:
    topicName: imagesTopic-${self:provider.stage} # since this variable is not used in lambda function, instead of defining in environment variable, defined here
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules: true
    documentation:
        api:
            info:
                version: v1.0.0
                title: Udagram API
                description: Serverless application for images sharing
        models:
            - name: GroupRequest
              contentType: application/json
              schema: ${file(models/create-group-request.json)}
            - name: ImageRequest
              contentType: application/json
              schema: ${file(models/create-image-request.json)}

functions:
    GetGroups:
        handler: src/lambda/http/getGroups.handler
        events:
            - http:
                  method: get
                  path: groups
                  cors: true
    CreateGroups:
        handler: src/lambda/http/createGroups.handler
        events:
            - http:
                  method: post
                  path: groups
                  cors: true
                  reqValidatorName: RequestBodyValidator
                  documentation:
                      summary: Create a new group
                      description: Create a new group
                      requestModels:
                          "application/json": GroupRequest
    GetImages:
        handler: src/lambda/http/getImages.handler
        events:
            - http:
                  method: get
                  path: groups/{groupId}/images
                  cors: true

    GetImage:
        handler: src/lambda/http/getImage.handler
        events:
            - http:
                  method: get
                  path: images/{imageId}
                  cors: true

    CreateImage:
        handler: src/lambda/http/createImage.handler
        events:
            - http:
                  method: post
                  path: groups/{groupId}/images
                  cors: true
                  reqValidatorName: RequestBodyValidator
                  documentation:
                      summary: Create a new Image in Group ID
                      description: Create a new Image in Group ID
                      requestModels:
                          "application/json": ImageRequest
    SendUploadNotifications:
        environment: # Environement vars which are local to this lambda function
            STAGE: ${self:provider.stage}
            API_ID:
                Ref: WebsocketsApi
        handler: src/lambda/s3/sendNotifications.handler
        events:
            - sns:
                  arn:
                      Fn::Join:
                          - ":"
                          - - arn:aws:sns
                            - Ref: AWS::Region
                            - Ref: AWS::AccountId
                            - ${self:custom.topicName}
                  topicName: ${self:custom.topicName}
    ResizeImage:
        handler: src/lambda/s3/resizeImage.handler
        events:
            - sns:
                  arn:
                      Fn::Join:
                          - ":"
                          - - arn:aws:sns
                            - Ref: AWS::Region
                            - Ref: AWS::AccountId
                            - ${self:custom.topicName}
                  topicName: ${self:custom.topicName}

    ConnectHandler:
        handler: src/lambda/websocket/connect.handler
        events:
            - websocket:
                  route: $connect

    DisconnectHandler:
        handler: src/lambda/websocket/disconnect.handler
        events:
            - websocket:
                  route: $disconnect
    # uncomment for elasticSearch Functionality
    # SyncWithElasticsearch:
    #     environment:
    #         ES_ENDPOINT: !GetAtt ImagesSearch.DomainEndpoint
    #     handler: src/lambda/dynamodb/elasticSearchSync.handler
    #     events:
    #         - stream:
    #               type: dynamodb
    #               arn: !GetAtt ImagesDynamoDBTable.StreamArn

resources:
    Resources:
        GroupsDynamoDBTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH # HASH -> PRIMARY KEY
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:provider.environment.GROUPS_TABLE}

        WebSocketConnectionsDynamoDBTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:provider.environment.CONNECTIONS_TABLE}

        ImagesDynamoDBTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: groupId
                      AttributeType: S
                    - AttributeName: timestamp
                      AttributeType: S
                    - AttributeName: imageId
                      AttributeType: S
                KeySchema:
                    - AttributeName: groupId
                      KeyType: HASH
                    - AttributeName: timestamp
                      KeyType: RANGE # RANGE -> SORT KEY
                GlobalSecondaryIndexes:
                    - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
                      KeySchema:
                          - AttributeName: imageId
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL # What attributes to copyto global seconday index
                BillingMode: PAY_PER_REQUEST
                StreamSpecification:
                    StreamViewType: NEW_IMAGE
                TableName: ${self:provider.environment.IMAGES_TABLE}
        RequestBodyValidator:
            Type: AWS::ApiGateway::RequestValidator
            Properties:
                Name: "request-body-validator"
                RestApiId:
                    Ref: ApiGatewayRestApi # API Gateway build using serverless
                ValidateRequestBody: true
                ValidateRequestParameters: false
        AttachmentsBucket:
            Type: AWS::S3::Bucket
            DependsOn: SNSTopicPolicy
            Properties:
                BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
                NotificationConfiguration:
                    TopicConfigurations:
                        - Event: s3:ObjectCreated:Put
                          Topic: !Ref ImagesTopic
                CorsConfiguration:
                    CorsRules:
                        - AllowedOrigins:
                              - "*"
                          AllowedHeaders:
                              - "*"
                          AllowedMethods:
                              - GET
                              - PUT
                              - POST
                              - DELETE
                              - HEAD
                          MaxAge: 3000

        SendUploadNotificationsPermission:
            Type: AWS::Lambda::Permission
            Properties:
                FunctionName: !Ref SendUploadNotificationsLambdaFunction
                Principal: s3.amazonaws.com
                Action: lambda:InvokeFunction
                SourceAccount: !Ref AWS::AccountId
                SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}

        BucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                PolicyDocument:
                    Id: MyPolicy
                    Version: "2012-10-17"
                    Statement:
                        - Sid: PubicReadForGetBucketObjects
                          Effect: Allow
                          Principal: "*" # Allow all to access
                          Action: "s3:GetObject"
                          Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
                Bucket: !Ref AttachmentsBucket
        SNSTopicPolicy:
            Type: AWS::SNS::TopicPolicy
            Properties:
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Principal:
                              AWS: "*"
                          Action: sns:Publish
                          Resource: !Ref ImagesTopic
                          Condition:
                              ArnLike:
                                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
                Topics:
                    - !Ref ImagesTopic

        ImagesTopic:
            Type: AWS::SNS::Topic
            Properties:
                DisplayName: Image Bucket Topic
                TopicName: ${self:custom.topicName}
        ThumbnailsBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}
        # Uncomment following to use ElasticSearch Resource
        # ImagesSearch:
        #     Type: AWS::Elasticsearch::Domain
        #     Properties:
        #         ElasticsearchVersion: "6.3"
        #         DomainName: images-search-${self:provider.stage}
        #         ElasticsearchClusterConfig:
        #             DedicatedMasterEnabled: false
        #             InstanceCount: "1"
        #             ZoneAwarenessEnabled: false
        #             InstanceType: t2.small.elasticsearch
        #         EBSOptions:
        #             EBSEnabled: true
        #             Iops: 0
        #             VolumeSize: 10
        #             VolumeType: "gp2"
        #         AccessPolicies:
        #             Version: "2012-10-17"
        #             Statement:
        #                 - Effect: Allow
        #                   Principal:
        #                       AWS: "arn:aws:iam::688282928763:user/serverless"
        #                   Action: "es:ESHttp*"
        #                   Resource: "arn:aws:es:${self:provider.region}:688282928763:domain/images-search-${self:provider.stage}/*"
